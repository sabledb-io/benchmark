{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>sb</code> - SableDB Benchmarking Tool","text":"<p><code>sb</code> (short for: SableDB benchmark) is part of the tooling for <code>SableDB</code>. In order to be a \"drop-in\" replacement for <code>valkey-benchmark</code> or <code>redis-benchmark</code>, <code>sb</code> uses the same switches.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Visual progress bar + ETA</li> <li>A standalone tool, does not require to build <code>SableDB</code> or <code>Valkey</code></li> <li>Support multi-threads + multi-connections</li> <li>Uses configuration file to persist executions</li> <li>Support for SET/GET load </li> <li>Support SSL/TLS</li> </ul> <pre><code>Usage: sb [OPTIONS]\n\nOptions:\n      --help                         Print this help message and exit\n  -c, --connections &lt;CONNECTIONS&gt;    Total number of connections [default: 512]\n      --threads &lt;THREADS&gt;            Number of threads to use. Each thread will run \"connections / threads\" connections [default: 1]\n  -h, --host &lt;HOST&gt;                  Host address [default: 127.0.0.1]\n  -p, --port &lt;PORT&gt;                  Host port [default: 6379]\n  -t, --test &lt;TEST&gt;                  test suits to run. Possible values are:\n                                     \"set\", \"get\", \"lpush\", \"lpop\", \"incr\", \"rpop\", \"rpush\", \"ping\", \"hset\", \"setget\".\n                                     Note that when the test is \"setget\", you can control the ratio by passing: \"--setget-ratio\" [default: set]\n  -d, --data-size &lt;DATA_SIZE&gt;        Payload data size [default: 256]\n  -k, --key-size &lt;KEY_SIZE&gt;          Key size, in bytes. If not provided, the key size is calculated based on the requested key range.\n                                     For example, if no \"key_size\" is provided and the \"key_range\" is 100,000, the key size will be 6\n  -r, --key-range &lt;KEY_RANGE&gt;        Number of unique keys in the benchmark [default: 1000000]\n  -n, --num-requests &lt;NUM_REQUESTS&gt;  Total number of requests [default: 1000000]\n  -l, --log-level &lt;LOG_LEVEL&gt;        Log level\n      --tls                          Use TLS handshake with SableDB / Valkey\n      --ssl                          Same as \"--tls\"\n  -P, --pipeline &lt;PIPELINE&gt;          Pipeline [default: 1]\n      --setget-ratio &lt;SETGET_RATIO&gt;  The ratio between SET:GET when test is \"SETGET\".\n                                     For example, passing \"1:4\" means: execute 1 SET for every 4 GET calls [default: 1:4]\n  -z, --randomize                    Keys are generated using sequential manner, i.e. from \"0\" until \"key-range\" in an incremental step of \"1\".\n                                     Passing \"-z\" or \"--randomize\" will generate random keys by generating random number from \"0\" -&gt; \"key-range\".\n  -s, --preset &lt;PRESET&gt;              Use preset command line. If set, \"sb\" will search for the preset name\n                                     in the configuration file \"$HOME/.sb.ini\" with that exact name and use the command line\n                                     set there.\n</code></pre>"},{"location":"usage/","title":"Using <code>sb</code>","text":""},{"location":"usage/#general-usage","title":"General usage","text":"<p>A typical test will be:</p> <ul> <li>Populate the database</li> <li>Run the test</li> </ul> <p>By default, <code>sb</code> does not require any parameters, it will:</p> <ul> <li>Attempt to connect to <code>SableDB</code> / <code>Valkey</code> / <code>Redis</code> listening on <code>127.0.0.1</code> using port <code>6379</code></li> <li>Uses <code>1</code> thread</li> <li>Each thread will open <code>512</code> connections</li> <li>Data size is set to: <code>256</code> bytes</li> <li>Key size is set to <code>7</code> bytes</li> <li>It will generate <code>1M</code> unique keys (e.g. <code>0000001</code>, <code>0000002</code> .. <code>1000000</code>)</li> <li>The default test is <code>SET</code></li> </ul> <p>Obviously, these parameters can all be modified, see <code>sb --help</code> for for more details</p>"},{"location":"usage/#presets","title":"Presets","text":"<p>When executed, <code>sb</code> searches for a configuration file under your home directory. Under Linux, this will be: <code>$HOME/.sb.ini</code>. This file can hold multiple execution configurations so you won't have to type them each time.</p> <p>For example, consider the following use case:</p> <ul> <li>I would like to fill the database with <code>1M</code> unique records, each with payload of 256 bytes.</li> <li>Once the database is populated, I would like to run a load that tests for <code>SET</code>/<code>GET</code>, where for every <code>1</code> <code>SET</code> operation, the benchmark executes <code>4</code> <code>GET</code> calls.</li> <li>Use 512 connections spreaded across 10 threads</li> </ul> <p>Now, one could write this manually (each time):</p> <pre><code># fill the database\nsb --threads 10 -t set -d 256 -c 512 -r 1000000\n\n# run setget test\nsb --threads 10 -t setget --setget-ratio \"1:4\" -d 256 -c 512 -n 10000000 -r 1000000 -z\n</code></pre> <p>As you can see, this is doable, however, its error prone, i.e. you can easily forget to type a parameter and report wrong results. To solve this, we can instead, create a the file <code>~/.sb.ini</code> with the following content:</p> <pre><code>[filldb]\ncommand=\"--threads 10 -t set -d 256 -c 512 -r 1000000\"\n\n[load]\ncommand=\"--threads 10 -t setget --setget-ratio \"1:4\" -d 256 -c 512 -n 10000000 -r 1000000 -z\"\n</code></pre> <p>And now, instead of typing the complete command each time, we can simply do this:</p> <pre><code>sb --preset filldb\nsb --preset load\n</code></pre>"}]}